{"remainingRequest":"D:\\SpringBootVueSecondShop\\client\\Snackstore\\node_modules\\babel-loader\\lib\\index.js!D:\\SpringBootVueSecondShop\\client\\Snackstore\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\SpringBootVueSecondShop\\client\\Snackstore\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\SpringBootVueSecondShop\\client\\Snackstore\\src\\components\\UserRegister.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\SpringBootVueSecondShop\\client\\Snackstore\\src\\components\\UserRegister.vue","mtime":1713860986508},{"path":"D:\\SpringBootVueSecondShop\\client\\Snackstore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\SpringBootVueSecondShop\\client\\Snackstore\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\SpringBootVueSecondShop\\client\\Snackstore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\SpringBootVueSecondShop\\client\\Snackstore\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"UserRegister\",\n  data: function data() {\n    var _this = this;\n\n    var validatePass = function validatePass(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (_this.form.checkPass !== '') {\n          _this.$refs.form.validateField('checkPass');\n        }\n\n        callback();\n      }\n    };\n\n    var validatePass2 = function validatePass2(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== _this.form.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n\n    var validatePass3 = function validatePass3(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('验证码不能为空'));\n      } else if (value !== _this.num) {\n        _this.updateCanvas();\n\n        callback(new Error('验证码输入有误'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      form: {\n        name: \"\",\n        password: \"\",\n        checkPass: \"\",\n        phone: \"\",\n        email: \"\",\n        city: \"\",\n        sex: \"\",\n        card: \"\",\n        imageValid: \"\" //用户输入的验证码\n\n      },\n      num: \"\",\n      //图片中的随机验证码\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        password: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }],\n        phone: [{\n          required: true,\n          message: \"请输入电话\",\n          trigger: 'blur'\n        }, {\n          min: 11,\n          max: 11,\n          message: \"电话号码格式不正确\",\n          trigger: 'blur'\n        }],\n        imageValid: [{\n          validator: validatePass3,\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: \"请输入邮箱地址\",\n          trigger: 'blur'\n        }],\n        city: [{\n          required: true,\n          message: \"请输入城市地址\",\n          trigger: 'blur'\n        }],\n        card: [{\n          required: true,\n          message: \"请输入银行卡号\",\n          trigger: 'blur'\n        }, {\n          min: 16,\n          max: 16,\n          message: \"银行卡号格式不正确\",\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    //重置表单\n    resetForm: function resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    //提交注册\n    register: function register(formName) {\n      var _this2 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        //表单验证\n        if (!valid) {\n          return;\n        } else {\n          _this2.axios.post(\"/user/register\", _this2.form).then(function (response) {\n            if (response.data.code === 0) {\n              _this2.$message({\n                message: \"注册成功！\",\n                type: \"success\"\n              });\n\n              _this2.resetForm('form');\n\n              _this2.$router.replace(\"/login\");\n            } else {\n              _this2.resetForm('form');\n\n              _this2.$message(\"该用户名已被注册！\");\n            }\n          }).catch(function (error) {\n            alert(error.message);\n          });\n        }\n      });\n    },\n    // 随机颜色函数\n    getColor: function getColor() {\n      var r = Math.floor(Math.random() * 256);\n      var g = Math.floor(Math.random() * 256);\n      var b = Math.floor(Math.random() * 256);\n      return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    },\n    draw: function draw() {\n      var context = this.$refs.canvas.getContext(\"2d\"); //舞台，getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。\n\n      context.strokeRect(0, 0, 120, 40); //绘制矩形（无填充）\n\n      var aCode = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]; // 绘制字母\n\n      var arr = []; //定义一个数组用来接收产生的随机数\n\n      for (var i = 0; i < 4; i++) {\n        var x = 20 + i * 20; //每个字母之间间隔20\n\n        var y = 20 + 10 * Math.random(); //y轴方向位置为20-30随机\n\n        var index = Math.floor(Math.random() * aCode.length); //随机索引值\n\n        var txt = aCode[index];\n        context.font = \"bold 20px 微软雅黑\"; //设置或返回文本内容的当前字体属性\n\n        context.fillStyle = this.getColor; //设置或返回用于填充绘画的颜色、渐变或模式，随机\n\n        context.translate(x, y); //重新映射画布上的 (0,0) 位置，字母不可以旋转移动，所以移动容器\n\n        var deg = 90 * Math.random() * Math.PI / 180; //0-90度随机旋转\n\n        context.rotate(deg); //  旋转当前绘图\n\n        context.fillText(txt, 0, 0); //在画布上绘制“被填充的”文本\n\n        context.rotate(-deg); //将画布旋转回初始状态\n\n        context.translate(-x, -y); //将画布移动回初始状态\n\n        arr[i] = txt; //接收产生的随机数\n      }\n\n      this.num = arr[0] + arr[1] + arr[2] + arr[3]; //将产生的验证码放入num\n      // 绘制干扰线条\n\n      for (var _i = 0; _i < 8; _i++) {\n        context.beginPath(); //起始一条路径，或重置当前路径\n\n        context.moveTo(Math.random() * 120, Math.random() * 40); //把路径移动到画布中的随机点，不创建线条\n\n        context.lineTo(Math.random() * 120, Math.random() * 40); //添加一个新点，然后在画布中创建从该点到最后指定点的线条\n\n        context.strokeStyle = this.getColor(); //随机线条颜色\n\n        context.stroke(); //  绘制已定义的路径\n      } // 绘制干扰点，和上述步骤一样，此处用长度为1的线代替点\n\n\n      for (var _i2 = 0; _i2 < 20; _i2++) {\n        context.beginPath();\n\n        var _x = Math.random() * 120;\n\n        var _y = Math.random() * 40;\n\n        context.moveTo(_x, _y);\n        context.lineTo(_x + 1, _y + 1);\n        context.strokeStyle = this.getColor();\n        context.stroke();\n      }\n    },\n    //更新验证码\n    updateCanvas: function updateCanvas() {\n      var context = this.$refs.canvas.getContext(\"2d\");\n      context.clearRect(0, 0, 120, 40); //在给定的矩形内清除指定的像素\n\n      this.draw();\n      console.log(this.num);\n    }\n  },\n  mounted: function mounted() {\n    this.draw();\n  }\n};",{"version":3,"sources":["UserRegister.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"register\">\r\n    <el-form :model=\"form\" status-icon :rules=\"rules\" ref=\"form\" label-width=\"100px\" class=\"demo-form\">\r\n       <el-form-item label=\"用户名\" prop=\"name\">\r\n        <el-input type=\"text\" v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"密码\" prop=\"password\">\r\n        <el-input type=\"password\" v-model=\"form.password\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"确认密码\" prop=\"checkPass\">\r\n        <el-input type=\"password\" v-model=\"form.checkPass\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"电话\" prop=\"phone\">\r\n        <el-input type=\"tel\" v-model=\"form.phone\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"邮箱\" prop=\"email\">\r\n        <el-input type=\"email\" v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"城市\" prop=\"city\">\r\n        <el-input type=\"text\" v-model=\"form.city\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"性别\" prop=\"sex\">\r\n        <el-radio-group v-model=\"form.sex\">\r\n          <el-radio label=\"0\">男</el-radio>\r\n          <el-radio label=\"1\">女</el-radio>\r\n        </el-radio-group>\r\n      </el-form-item>\r\n      <el-form-item label=\"银行卡号\" prop=\"card\">\r\n        <el-input type=\"tel\" v-model=\"form.card\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"验证码\" prop=\"imageValid\">\r\n        <el-input type=\"text\" v-model=\"form.imageValid\"></el-input>\r\n        <canvas ref=\"canvas\" id=\"canvas\" width=\"120\" height=\"40\" @click=\"updateCanvas()\"></canvas>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"register('form')\">提交</el-button>\r\n        <el-button @click=\"resetForm('form')\">重置</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n    <div class=\"toMerchantRegister\"><router-link to=\"/sellRegister\">&gt;商家注册</router-link></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"UserRegister\",\r\n  data() {\r\n     var validatePass = (rule, value, callback) => {\r\n        if (value === '') {\r\n          callback(new Error('请输入密码'));\r\n        } else {\r\n          if (this.form.checkPass !== '') {\r\n            this.$refs.form.validateField('checkPass');\r\n          }\r\n          callback();\r\n        }\r\n      };\r\n      var validatePass2 = (rule, value, callback) => {\r\n        if (value === '') {\r\n          callback(new Error('请再次输入密码'));\r\n        } else if (value !== this.form.password) {\r\n          callback(new Error('两次输入密码不一致!'));\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n      var validatePass3 = (rule, value, callback) => {\r\n        if(value === ''){\r\n          callback(new Error('验证码不能为空'));\r\n        }else if(value !== this.num){\r\n          this.updateCanvas();\r\n          callback(new Error('验证码输入有误'));\r\n        }else{\r\n          callback();\r\n        }\r\n      }\r\n    return {\r\n      form:{\r\n        name: \"\",\r\n        password: \"\",\r\n        checkPass: \"\",\r\n        phone: \"\",\r\n        email: \"\",\r\n        city: \"\",\r\n        sex: \"\",\r\n        card: \"\",\r\n        imageValid:\"\"  //用户输入的验证码\r\n      },  \r\n      num: \"\", //图片中的随机验证码\r\n      rules: {\r\n        name: [\r\n          {required: true, message: '请输入用户名', trigger: 'blur'}\r\n        ],\r\n        password: [\r\n          { validator: validatePass, trigger: 'blur' }\r\n        ],\r\n        checkPass: [\r\n          { validator: validatePass2, trigger: 'blur' }\r\n        ],\r\n        phone: [\r\n          {required:true, message:\"请输入电话\", trigger: 'blur'},\r\n          {min:11,max:11, message:\"电话号码格式不正确\", trigger: 'blur'}\r\n        ],\r\n        imageValid: [\r\n          {validator: validatePass3, trigger: 'blur'}\r\n        ],\r\n        email:[{required:true, message:\"请输入邮箱地址\", trigger: 'blur'}],\r\n        city:[{required:true, message:\"请输入城市地址\", trigger: 'blur'}],\r\n        card: [\r\n          {required:true, message:\"请输入银行卡号\", trigger: 'blur'},\r\n          {min:16,max:16, message:\"银行卡号格式不正确\", trigger: 'blur'}\r\n        ],\r\n      }\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    //重置表单\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n    },\r\n\r\n    //提交注册\r\n    register(formName) {\r\n      this.$refs[formName].validate((valid) => {   //表单验证\r\n        if (!valid) {\r\n           return;\r\n        }\r\n        else{\r\n          this.axios.post(\"/user/register\", this.form)\r\n          .then(response => {\r\n            if(response.data.code === 0){\r\n              this.$message({\r\n                message:\"注册成功！\",\r\n                type:\"success\"\r\n              });\r\n              this.resetForm('form');\r\n              this.$router.replace(\"/login\");\r\n            }else{\r\n              this.resetForm('form');\r\n              this.$message(\"该用户名已被注册！\");\r\n            }\r\n          })\r\n          .catch(error => {\r\n            alert(error.message)\r\n          })\r\n        }\r\n      });\r\n    },\r\n\r\n    \r\n    // 随机颜色函数\r\n    getColor() {\r\n        var r = Math.floor(Math.random() * 256);\r\n        var g = Math.floor(Math.random() * 256);\r\n        var b = Math.floor(Math.random() * 256);\r\n        return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n    },\r\n    draw() {\r\n        var context = this.$refs.canvas.getContext(\"2d\");//舞台，getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。\r\n        context.strokeRect(0, 0, 120, 40);//绘制矩形（无填充）\r\n        var aCode = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\r\n        // 绘制字母\r\n        var arr = [] //定义一个数组用来接收产生的随机数\r\n        for (var i = 0; i < 4; i++) {\r\n            let x = 20 + i * 20;//每个字母之间间隔20\r\n            let y = 20 + 10 * Math.random();//y轴方向位置为20-30随机\r\n            var index = Math.floor(Math.random() * aCode.length);//随机索引值\r\n            var txt = aCode[index];\r\n            context.font = \"bold 20px 微软雅黑\";//设置或返回文本内容的当前字体属性\r\n            context.fillStyle=this.getColor;//设置或返回用于填充绘画的颜色、渐变或模式，随机\r\n            context.translate(x,y);//重新映射画布上的 (0,0) 位置，字母不可以旋转移动，所以移动容器\r\n            var deg=90*Math.random()*Math.PI/180;//0-90度随机旋转\r\n            context.rotate(deg);//  旋转当前绘图\r\n            context.fillText(txt, 0, 0);//在画布上绘制“被填充的”文本\r\n            context.rotate(-deg);//将画布旋转回初始状态\r\n            context.translate(-x,-y);//将画布移动回初始状态\r\n            arr[i] = txt //接收产生的随机数\r\n        }\r\n        this.num = arr[0] + arr[1] + arr[2] + arr[3] //将产生的验证码放入num\r\n        // 绘制干扰线条\r\n        for (let i = 0; i < 8; i++) {\r\n            context.beginPath();//起始一条路径，或重置当前路径\r\n            context.moveTo(Math.random() * 120, Math.random() * 40);//把路径移动到画布中的随机点，不创建线条\r\n            context.lineTo(Math.random() * 120, Math.random() * 40);//添加一个新点，然后在画布中创建从该点到最后指定点的线条\r\n            context.strokeStyle=this.getColor();//随机线条颜色\r\n            context.stroke();//  绘制已定义的路径\r\n        }\r\n        // 绘制干扰点，和上述步骤一样，此处用长度为1的线代替点\r\n        for (let i = 0; i < 20; i++) {\r\n            context.beginPath();\r\n            let x = Math.random() * 120;\r\n            let y = Math.random() * 40;\r\n            context.moveTo(x, y);\r\n            context.lineTo(x + 1, y + 1);\r\n            context.strokeStyle=this.getColor();\r\n            context.stroke();\r\n        }\r\n    }, \r\n    //更新验证码\r\n    updateCanvas(){\r\n      var context = this.$refs.canvas.getContext(\"2d\");\r\n       context.clearRect(0, 0, 120, 40);//在给定的矩形内清除指定的像素\r\n       this.draw();\r\n       console.log(this.num);\r\n    }\r\n  },\r\n  mounted(){\r\n    this.draw()\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.register {\r\n  margin: 0 auto;\r\n  padding: 2em 0;\r\n  width: 500px;\r\n}\r\n\r\n.imageVaild{\r\n  position:relative;\r\n}\r\n\r\ncanvas{\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n}\r\n.toMerchantRegister{\r\n  position: relative;\r\n}\r\n.toMerchantRegister a{\r\n  position: absolute;\r\n  top: -50px;\r\n  right: 0;\r\n}\r\na{\r\n  text-decoration: none;\r\n}\r\n</style>"],"sourceRoot":"src/components"}]}